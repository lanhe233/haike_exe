// 嵌套
#main .p{
	color: #000;

	.redbox {
		background-color: #f00;
		color: #f00;
	}

	// 父选择器 &
	&:hover {
		color: #eee;
	}
	// 父选择器之前还可以加选择器
	body.firefox & {
		font-weight: normal;
	}
	// &还可以跟随后缀生成复合的选择器
	// 但是&前面不能紧跟前缀
	&-name{
		color: lightgreen;
	}
}

// 属性嵌套
// 有些css属性遵循相同的命名空间，如font
.div{
	font: {
		size: 12px;
		weight: bold;
		family: 'Microsoft Yahei';
	}
	// or
	font: 12px/24px {
		weight: bold;
		family: 'Microsoft Yahei';
	}
}

/* 注释 保留 */
// 注释 不保留
// 还可通过#{}获得变量

// 变量 $
$width: 800px;
$fontSize: 12px;

// 除法 /
// 值中存在变量时，/会被认为是除号，如果是想要分隔符，则使用#{}包裹变量即可
.div {
	font: #{$fontSize} / 24px;
}

// 插值语句 #{}

// 同时导入多个scss文件
// @import 'a', 'b';

// 命名 _a.scss的作用是使之不被编译为css文件，但仍然可以使用
// @import 'a'			不写文件名字中的_

/*
继承
	@extend .error
	只要有有.error选择器的样式都会匹配
	@extend 的作用是将重复使用的样式 (.error) 延伸 (extend) 给需要包含这个样式的特殊样式（.seriousError）
	多重继承 @extend .error, .message;

占位符选择器
	需要通过延伸指令使用，用法与 class 或者 id 选择器一样，被延伸后，占位符选择器本身不会被编译。
	// This ruleset won't be rendered on its own.
	#context a%extreme {
	  color: blue;
	  font-weight: bold;
	  font-size: 2em;
	}
	.notice {
	  @extend %extreme;
	}
	编译为
	#context a.notice {
	  color: blue;
	  font-weight: bold;
	  font-size: 2em; }

if-else指令
	$type: monster;
	p {
	  @if $type == ocean {
	    color: blue;
	  } @else if $type == matador {
	    color: red;
	  } @else if $type == monster {
	    color: green;
	  } @else {
	    color: black;
	  }
	}

@for 指令
	@for $i from 1 through 3 {
	  .item-#{$i} { width: 2em * $i; }
	}
	编译为
	.item-1 {
	  width: 2em; }
	.item-2 {
	  width: 4em; }
	.item-3 {
	  width: 6em; }

@each 指令
	@each $animal in puma, sea-slug, egret, salamander {
	  .#{$animal}-icon {
	    background-image: url('/images/#{$animal}.png');
	  }
	}
	编译为
	.puma-icon {
	  background-image: url('/images/puma.png'); }
	.sea-slug-icon {
	  background-image: url('/images/sea-slug.png'); }
	.egret-icon {
	  background-image: url('/images/egret.png'); }
	.salamander-icon {
	  background-image: url('/images/salamander.png'); }

	@each $animal, $color, $cursor in (puma, black, default),
	                                  (sea-slug, blue, pointer),
	                                  (egret, white, move) {
	  .#{$animal}-icon {
	    background-image: url('/images/#{$animal}.png');
	    border: 2px solid $color;
	    cursor: $cursor;
	  }
	}
	编译为
	.puma-icon {
	  background-image: url('/images/puma.png');
	  border: 2px solid black;
	  cursor: default; }
	.sea-slug-icon {
	  background-image: url('/images/sea-slug.png');
	  border: 2px solid blue;
	  cursor: pointer; }
	.egret-icon {
	  background-image: url('/images/egret.png');
	  border: 2px solid white;
	  cursor: move; }

	@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
	  #{$header} {
	    font-size: $size;
	  }
	}
	编译为
	h1 {
	  font-size: 2em; }
	h2 {
	  font-size: 1.5em; }
	h3 {
	  font-size: 1.2em; }

@while指令
	$i: 6;
	@while $i > 0 {
	  .item-#{$i} { width: 2em * $i; }
	  $i: $i - 2;
	}
	编译为
	.item-6 {
	  width: 12em; }
	.item-4 {
	  width: 8em; }
	.item-2 {
	  width: 4em; }

@mixin混合指令
	混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 .float-left。混合指令可以包含所有的 CSS 规则，绝大部分Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。
	使用 @include 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）：
		@mixin clearfix {
		  display: inline-block;
		  &:after {
		    content: ".";
		    display: block;
		    height: 0;
		    clear: both;
		    visibility: hidden;
		  }
		  * html & { height: 1px }
		}
		.page-title {
		  @include clearfix;
		  padding: 4px;
		  margin-top: 10px;
		}
	参数变量也可以用在引用混合指令的时候 (@include)，与平时用法一样，将一串值列表中的值逐条作为参数引用：
	@mixin colors($text, $background, $border) {
	  color: $text;
	  background-color: $background;
	  border-color: $border;
	}
	$values: #ff0000, #00ff00, #0000ff;
	.primary {
	  @include colors($values...);
	}

函数

*/	









